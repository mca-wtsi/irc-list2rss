#! /usr/bin/env plackup

use strict;
use warnings;

use Time::HiRes qw( gettimeofday tv_interval );
BEGIN {
  my $t0 = [gettimeofday()];

  sub iso8601 {
    my ($t) = @_;
    my @t = localtime($t);
    return sprintf('%04d%02d%02dt%02d%02d%02d',
		   $t[5]+1900,$t[4]+1,@t[3,2,1,0]);
  }
  my $t0_str = iso8601($$t0[0]);

  $SIG{__WARN__} = sub {
    my $t = tv_interval($t0);
    my $now = sprintf('%s +%9.6f', $t0_str, $t);
    my $txt = "@_";
    $txt =~ s{^}{$now: }mg;
    warn $txt;
  };
}

use IRC::Utils qw( strip_formatting );
use POE qw( Component::IRC );
use XML::RSS;
use DateTime::Format::W3CDTF;

sub dbg { require YAML; warn YAML::Dump(\@_) }

sub irc_raw     { warn "<= $_[10]" }
sub irc_raw_out { warn "=> $_[10]" }


my $t1; # (best guess at) chanserv's relative time
my %done = (chanserv => 0, list => 0);
my %chan; # key = '#channel', value = \%info
my @hup; # info about hangup
# %info = (t => $unixtime_created, topic => $formatted ] # any may be undef
# XXX: characterset tracking and IRC unformatting is left undone in a cavalier way


sub app {
  my $env = shift;

  do_irc();

  if (waiting_for()) {
    require YAML;
    return [ '500',
	     [ 'Content-Type' => 'text/plain' ],
	     [ "Incomplete data.  This is what I have\n",
	       YAML::Dump({ chan => \%chan,
			    waiting_for => [waiting_for()],
			    hangup => \@hup }),
	     ]
	   ];
  } else {
    return [ '200',
	     [ 'Content-Type' => 'text/xml' ],
	     [ rssify(\%chan)->as_string ],
	   ];
  }
}


sub do_irc_fake {
  # quicker than pounding the server
  %done = ();
  %chan = ('#foo' => { topic => 'Foo those bars!' },
	   '#bar' => { topic => 'Bar those doors!' },
	   '#minimal' => {},
	   '#reg' => { regtime => time() - 168*24*3600 },
	  );
}

sub do_irc {
  my $irc = POE::Component::IRC->spawn
    (nick   => 'list2rss',
     ircname => $0,
     server => 'localhost', port => 16667, # I have a tunnel to the local ircd
     # you may not want to /list on a big network
    ) or die "POE::Component::IRC spawn failed: $!";

  # $irc->raw_events(1);

  my $sess = POE::Session->create
      (package_states => [ __PACKAGE__, [qw[ _start irc_socketerr irc_connected irc_001 irc_321 irc_322 irc_323 irc_notice irc_msg irc_raw irc_raw_out ]] ],
       heap => { irc => $irc });

#  $sess->option(trace => 1);

  $poe_kernel->sig(INT => "got_sig_int");

  # global is exported from POE::Kernel by POE
  $poe_kernel->run();
  # returns after IRC shutdown
}

sub listener_got_sig_int {
  warn "Received SIGINT\n";

  hangup_irc($_[HEAP]->{irc}, 'sigint');
  $_[KERNEL]->sig_handled();
  # based on http://poe.perl.org/?POE_Cookbook/Web_Server_With_Forking
}


=head1 IRC EVENTS

=head2 _start

Component initialised?

=cut

sub _start {
  my $heap = $_[HEAP];

  # retrieve our component's object from the heap where we stashed it
  my $irc = $heap->{irc};

  $irc->yield( register => 'all' );
  $irc->yield( connect => { } );
}

sub irc_socketerr {
  my $fail = $_[ARG0];
  hangup_irc($_[HEAP]->{irc}, fail => $fail);
}


sub __poe_dump {
  my %arg;
  @arg{qw{ CALLER_FILE CALLER_LINE CALLER_STATE STATE }}
    = @_[  CALLER_FILE,CALLER_LINE,CALLER_STATE,STATE ];
  $arg{args} = @_[ ARG0 .. $#_ ];
  require YAML;
  warn YAML::Dump({ irc_socketerr => \%arg });
}


=head2 irc_001

We received the welcome message from ircd.

=cut

sub irc_connected {  } # too early to send commands
sub irc_001 {
  my $irc = $_[HEAP]->{irc};

  # Connected & introduced.  Ask for what we want
  $irc->yield('list');
  $irc->yield(privmsg => 'ChanServ', 'list *');
  $t1 = time();
}


sub irc_notice {
  my ($from, undef, $msg) = @_[10..12];
#  dbg({ notice => { from => $from, msg => $msg } });
  msg($msg, $from, 1, $_[HEAP]->{irc});
}

sub irc_msg {
  my ($from, undef, $msg) = @_[10..12];
  msg($msg, $from, 0, $_[HEAP]->{irc});
#  dbg({ msg => { from => $from, msg => $msg } });
  hangup_irc($_[HEAP]->{irc}, 'bye') if $msg =~ /bye/;
}

sub msg {
  my ($msg, $from, $is_notice, $irc) = @_;
  my $plain = strip_formatting($msg);
  my $type = $is_notice ? 'notice' : 'privmsg';
  if (my ($serv, $origin) = $from =~ m{^(chanserv|global)!\1\@(.*)}i) {
    if ($serv =~ /^chanserv$/i) {
      chanserv($plain, $irc);
    }
#    else { warn "Ignoring service '$serv'" }
  } else {
    warn "$type from $from (?) : $plain\n";
  }
}

sub chanserv {
  my ($txt, $irc) = @_;
  if ($txt =~ /^-- Listing channels matching/) {
    # our query; ignore
  } elsif (my ($ch, $tstr) = $txt =~
	   m{^(#\S+)\s+.*created (.*) ago}) {
    # #foochan      << ACTIVE >> created 1 week 1 day (11h 22m 11s) ago
    $tstr =~ s{[()]}{}g;
    my $t = $t1; # the "now" from earlier
    my %u = (s => 1, m => 60, h => 3600,
	     day => 24*3600, week => 7*24*3600);
    while ($tstr =~ s{^\s*(\d+\.?\d*)\s*([a-z]+)\s*}{}) {
      my ($n, $unit) = ($1, $2);
      my $mul = $u{$unit};
      if (!defined $mul && $unit =~ s/(.)s$/$1/) {
	$mul = $u{$unit};
      }
      if ($mul) {
	$t -= $mul * $n;
      } else {
	warn "Unknown unit $n*'$unit' from chanserv ('$tstr' <= '$txt')";
	undef $t;
	last;
      }
    }
    undef $t if $tstr ne '';
    $chan{$ch}->{'regtime'} = $t;
    # XXX: could also "privmsg chanserv info $ch", to get founder(+last seen) + last used
    # no wildcard and not well delimited, would be slow
  } elsif ($txt =~ /^-- End of list /) {
    is_done(chanserv => $irc);
  } else {
    warn "Unrecognised chanserv txt '$txt'";
  }
}


sub is_done {
  my ($key, $irc) = @_;
  warn "Done what $key?" unless exists $done{$key};
  my @left = waiting_for();
  $done{$key} ++;
  if (@left && !waiting_for()) {
    hangup_irc($irc, 'all done');
  }
}

sub waiting_for {
  return grep { !$done{$_} } sort keys %done;
}


###  From RFC1459 sec 6.2:
#
#   321     RPL_LISTSTART
#                   "Channel :Users  Name"
#   322     RPL_LIST
#                   "<channel> <# visible> :<topic>"
#   323     RPL_LISTEND
#                   ":End of /LIST"
#
#           - Replies RPL_LISTSTART, RPL_LIST, RPL_LISTEND mark
#             the start, actual replies with data and end of the
#             server's response to a LIST command.  If there are
#             no channels available to return, only the start
#             and end reply must be sent.
sub irc_321 {
  # warn "[321-";
}
sub irc_322 {
  # warn "-322-";
  my ($ch, $npeep, $topic) = @{ $_[12] };
  # dbg(322 => [ @_[10..$#_] ]);
  $chan{$ch}->{topic} = $topic;
  $chan{$ch}->{npeep} = $npeep;
}
sub irc_323 {
  # warn "-323]";
  is_done(list => $_[HEAP]->{irc});
}


sub hangup_irc {
  my ($irc, @hup_info) = @_;
  push @hup, \@hup_info;
  $irc->yield(shutdown => "Must dash - HTTP client waiting", 5);
}



sub rssify {
  my ($chan) = @_;

  my $rss = XML::RSS->new (version => '2.0');
  $rss->channel(title          => 'irc list2rss',
		link           => 'https://github.com/mca-wtsi/irc-list2rss',
		description    => 'Channels on IRC server',
               );

  my $S = as_channel(\%chan);
  foreach my $ch (sort $S keys %$chan) {
    my $date = $chan->{$ch}{regtime};
    if ($date) {
      $date = DateTime->from_epoch(epoch => $chan->{$ch}{regtime});
      $date = DateTime::Format::W3CDTF->new->format_datetime($date);
    }

    $rss->add_item
      (title => $ch,
       description => $chan->{$ch}{topic},
       pubDate => $date);
  }

  return $rss;
}

sub as_channel { # curried sorter
  my ($chan) = @_;
  return sub {
    (defined $chan->{$b}{regtime} <=> defined $chan->{$a}{regtime} ||
     ($chan->{$b}{regtime} || 0)  <=> ($chan->{$a}{regtime} || 0)  ||
     $a cmp $b );
  }
}


\&app;
